API Calling(Application Programming Interface)

https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API

https://jsonplaceholder.typicode.com/posts

https://randomuser.me/

fetch() -  The fetch() method takes one mandatory argument, the path to the resource you want to fetch. It returns a Promise that resolves to the Response to that request — as soon as the server responds with headers — even if the server response is an HTTP error status.

Context API - The application that we built in this tutorial utilized component props to pass data from its App component to the child components that needed it. Most of the time, props are an appropriate method for sharing data; for complex, deeply nested applications, however, they're not always best.
React provides the Context API as a way to provide data to components that need it without passing props down the component tree. There's also a useContext hook that facilitates this.
We use context api to avoid props drilling
Best Practice for Context Api in our cartContext example
instead of importing {useContext} from 'react' & importing CartContext from './context/Cart' and then initializing cont cart = useContext(CartContext); again and again we can improve this by creating our own hook

in file './context/Cart'  we already have
import { createContext, useState, useContext } from 'react';
export const CartContext = createContext(null);
// creating the hook
export const useCart = function() {
    const cart = useContext(CartContext);
    return cart;
}

now we only need to import the useCart and can directly use the cart
in file ./cartComponents/Cart
import React from 'react';
import { useCart } from '../context/Cart';
// import { useContext } from 'react';
// import { CartContext } from '../context/Cart';
// const cart = useContext(CartContext);
const cart = useCart();
