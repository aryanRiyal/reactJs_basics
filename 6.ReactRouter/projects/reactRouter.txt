01reactRouter


//  Active Links in react-router-dom
//  How to use NavLink to highlight the current page?
./src/components/Header/Header.jsx
<NavLink
    className={({ isActive }) =>
        `block py-2 pr-4 pl-3 duration-200 ${
            isActive ? "text-orange-700" : "text-gray-700"
        } border-b border-gray-100 hover:bg-gray-50 lg:hover:bg-transparent lg:border-0 hover:text-orange-700 lg:p-0`
    }
>
    Home
</NavLink>

Instead of App.jsx we can also use RouterProvider in the main.jsx, it also requires a prop named router to work properly
<StrictMode>
        <RouterProvider router={router} />
</StrictMode>


//  How to create a router?
./src/main.jsx
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./index.css";
// import App from "./App.jsx";
import { createBrowserRouter, createRoutesFromElements, Route, RouterProvider } from "react-router-dom";
import Layout from "./Layout";
import { Home, About, Contact, User, Github, githubInfoLoader } from "./components";

// Method 1
const router = createBrowserRouter([
    {
        path: "/",
        element: <Layout />,
        children: [
            { path: "", element: <Home /> },
            { path: "about", element: <About /> },
            { path: "contact", element: <Contact /> }
        ]
    }
]);

// Method 2
const router = createBrowserRouter(
    createRoutesFromElements(
        <Route path="/" element={<Layout />}>
            <Route path="" element={<Home />} />
            <Route path="/about" element={<About />} />
            <Route path="/contact" element={<Contact />} />
            <Route path="/user/:userid" element={<User />} />
            <Route loader={githubInfoLoader} path="/github" element={<Github />} />
        </Route>
    )
);


//  Creating a Layout using Outlet
Instead of again and again adding the header and footer to different components we can also create a dynamic layout using the outlets provided by the react-router-dom

./src/Layout.jsx
import React from "react";
import { Header, Footer } from "./components";
import { Outlet } from "react-router-dom";
function Layout() {
    return (
        <>
            <Header />
            <Outlet />
            <Footer />
        </>
    );
}
export default Layout;


// useParams in react-router-dom
./src/main.jsx
<Route path="user/:userid" element={<User />} />

./src/components/User/User.jsx
import React from "react";
import { useParams } from "react-router-dom";
function User() {
    const { userid } = useParams();
    return (
        <div className="flex justify-center items-center">
            <div className="bg-gray-600 text-white text-3xl p-4 text-center rounded-md w-[1200px]">User: {userid}</div>
        </div>
    );
}
export default User;


//  Data Loader in react-router-dom
Instead of useEffect to fetch Api data we can also use the loader and useLoaderData provided by the react-router-dom

./src/main.jsx
const router = createBrowserRouter(
    createRoutesFromElements(
        <Route path="/" element={<Layout />}>
            <Route path="" element={<Home />} />
            <Route path="/about" element={<About />} />
            <Route path="/contact" element={<Contact />} />
            <Route path="/user/:userid" element={<User />} />
            <Route loader={githubInfoLoader} path="/github" element={<Github />} />
        </Route>
    )
);

./src/components/Github/Github.jsx
import React from "react";
import { useLoaderData } from "react-router-dom";
export function Github() {
    const data = useLoaderData();
    return (
        <div className="text-center m-4 bg-gray-600 text-white p-4 text-3xl">
            Github Followers: {data.followers} <img src={data.avatar_url} alt="Git Picture" width={250} />
        </div>
    );
}
export const githubInfoLoader = async () => {
    const response = await fetch("https://api.github.com/users/aryanRiyal");
    return response.json();
};


Also faced an issue because of Vite's Fast Refresh mechanism is incompatible with mixing named exports and default exports.
For more details: 2.customReactAndRendering/exportAndExportDefault.txt

./src/components/index.js
import Header from "./Header/Header";
import Home from "./Home/Home";
import About from "./About/About";
import Contact from "./Contact/Contact";
import User from "./User/User";
// import Github from "./Github/Github";
// import { githubInfoLoader } from "./Github/githubInfoLoader";
import { Github, githubInfoLoader } from "./Github/Github";
import Footer from "./Footer/Footer";

export { Header, Home, About, Contact, User, Github, githubInfoLoader, Footer };

//  Issue: Vite's Fast Refresh mechanism is incompatible with mixing named exports and default exports.

//  Reason: The issue occurs because Vite's Fast Refresh mechanism is incompatible with mixing named exports and default exports when using React components and loaders together. Specifically, githubInfoLoader being exported alongside the default Github component is causing the issue.

//  Solution 1: To resolve the issue, you can move the githubInfoLoader function to a separate file. This way, the component file only contains the React component (default export), and the loader logic can be modularized for better maintainability.

//  Solution 2: Exporting both Github and githubInfoLoader as named exports instead of using export default is a valid approach, and it resolves the issue with Vite's Fast Refresh.
