Difference Between `export` and `export default`:

1. Purpose:
   - `export`: For named exports, allows exporting multiple values.
   - `export default`: For a single main value per module.

<---- ---->

2. Syntax:
   - Named Export: 
     ``javascript
     export const add = (a, b) => a + b;
	 export const subtract = (a, b) => a - b;
	 export class Calculator {
    	 multiply(a, b) {
         	 return a * b;
     	 }
	 }
     ``

   - Default Export:
     ``javascript
     export default function multiply(a, b) {
         return a * b;
     }
     ``

<---- ---->

3. Importing:
   - Named Export:
     ``javascript
     // main.js
	 import { add, subtract } from './module.js';
	 console.log(add(2, 3)); // 5

	 // Importing all exports
	 import * as math from './module.js';
	 console.log(math.subtract(5, 3)); // 2
	 console.log(math.Calculator); // Class reference
     ``

   - Default Export:
     ``javascript
     // main.js
     import multiplyFunction from './module.js'; // Name can be anything
     console.log(multiplyFunction(4, 5)); // 20
     ``

<---- ---->

4. Number of Exports:
   - `export`: Allows multiple exports from a single file.
   - `export default`: Only one default export per module.

<---- ---->

5. Use Case:
   - Use `export` for utility modules with multiple functions/values.
   - Use `export default` for modules focusing on a single component or function.

<---- ---->

6. Example of Both Combined:
   ``javascript
   // module.js
   export const divide = (a, b) => a / b;
   export default function multiply(a, b) {
       return a * b;
   }

   // main.js
   import multiply, { divide } from './module.js';
   console.log(multiply(4, 5)); // 20
   console.log(divide(10, 2)); // 5
   ``


// Vite's Fast Refresh mechanism is incompatible with mixing named exports and default exports
Example: 6.ReactRouter/projects/01reactRouter

/components/Github/Github.jsx
/*
import React, { useEffect, useState } from "react";
import { useLoaderData } from "react-router-dom";

function Github() {
    const data = useLoaderData();
    return (
        <div className="text-center m-4 bg-gray-600 text-white p-4 text-3xl">
            Github Followers: {data.followers} <img src={data.avatar_url} alt="Git Picture" width={250} />
        </div>
    );
}
export default Github;

export const githubInfoLoader = async () => {
    const response = await fetch("https://api.github.com/users/aryanRiyal");
    return response.json();
};
*/

/components/index.js
/*
import Header from "./Header/Header";
import Home from "./Home/Home";
import About from "./About/About";
import Contact from "./Contact/Contact";
import User from "./User/User";
// import Github from "./Github/Github";
// import { githubInfoLoader } from "./Github/githubInfoLoader";
import { Github, githubInfoLoader } from "./Github/Github";
import Footer from "./Footer/Footer";

export { Header, Home, About, Contact, User, Github, githubInfoLoader, Footer };
*/

Error:   [vite] hmr invalidate /src/components/Github/Github.jsx Could not Fast Refresh ("githubInfoLoader" export is incompatible).

// Reason
 The issue occurs because Vite's Fast Refresh mechanism is incompatible with mixing named exports and default exports when using React components and loaders together. Specifically, githubInfoLoader being exported alongside the default Github component is causing the issue.

Explanation:
Fast Refresh Mechanism: Vite's React plugin expects every component file to have a consistent and clear structure for exports (preferably a default export only). Mixing default and named exports from a component file can confuse Fast Refresh and trigger the error you're seeing.

Current Issue: In your Github.jsx, you're:
  - Exporting the Github component as a default export.
  -  Exporting the githubInfoLoader function as a named export.
This structure works for JavaScript but causes problems with Vite's Fast Refresh system.

//  Solution 1: To resolve the issue, you can move the githubInfoLoader function to a separate file. This way, the component file only contains the React component (default export), and the loader logic can be modularized for better maintainability.

//  Solution 2: Exporting both Github and githubInfoLoader as named exports instead of using export default is a valid approach, and it resolves the issue with Vite's Fast Refresh.

When Named Exports Are Ideal
	- Collaborative Projects: If multiple developers are working on the project, named exports can make code more readable and less error-prone.
	- Utility-Focused Files: If a file contains multiple related functions or components (like Github and githubInfoLoader), named exports make sense.
	- Fast Refresh Context: Vite works better with named exports for consistency.

When to Use export default
	- If the file contains only one component or primary functionality (e.g., a single React component), a default export is more concise and conventional.
	- For simple projects where convention and compatibility with third-party tools are priorities.