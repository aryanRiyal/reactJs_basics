Topics used - https://react.dev/learn#

In depth experiments with createElement and render().
How react creates trees for elements and how it renders HTML.

Created our own React Element in customReact/customreact.js
    used a container than selected a root id element using query selector
    then we created a render method that can inject our reactElement to the container
This was the custom render method

then we tried the render method provided by the react library
    used the App to understand how render works and what not to do
    again created our own element but this time using React.createElement because we were also using the render provided by react 
    basic intro to babel as a transpiler because createElement auto injects into the main container
    then comes the evaluated expressions, this explains how variables are used and injected 

JSX (JavaScript XML(Extensible Markup Language))
Components
    Consistency: React components must return a single element.
    Structure: A single parent element helps organize and group child elements.
    Flexibility: Using div, section, or React.Fragment allows for easier styling and layout control.
CSS (Cascading Style Sheets)
Props
    For Example:   ./components/TodoItem.jsx - {props.completed ? <></> : <input type='checkbox' />}
                                ./App.js - <TodoItem completed='true' text='Code' />
Hooks
    LifeCycle of a Component
        Constructed -> Mounted -> Updated -> Unmounted then repeat from the start
    useState Hook
        Whenever the value of the state changes, the component re-renders itself with updated value(means every use of function to set the value will re-render the whole component again and again)
    useEffect Hook
        Run code during the change in lifecycle of a component